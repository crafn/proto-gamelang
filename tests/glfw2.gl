// Compiling: ./compiler ./tests/glfw2.gl -lglfw -lGL -lm

// GLFW
let GLFW_WINDOW := 0x00010001;
let GLFW_KEY_A := 65;
let GLFW_KEY_D := 68;
let GLFW_MOUSE_LEFT := 0;
extern {
	let glfwInit: fn() -> int;
	let glfwTerminate: fn();
	let glfwOpenWindow: fn(	w: int, h: int, r: int, g: int, b: int, a: int,
							d: int, s: int, mode: int) -> ?void;
	let glfwSetWindowTitle: fn(str: ?char);
	let glfwSwapBuffers: fn();
	let glfwSleep: fn(seconds: f32);
	let glfwGetKey: fn(key: int) -> int;
	let glfwGetMousePos: fn(x: ?int, y: ?int);
	let glfwGetMouseButton: fn(btn: int) -> int;
}

// OpenGL
let GL_COLOR_BUFFER_BIT := 16384;
let GL_QUADS := 7;
extern {
	let glClearColor: fn(r: f32, g: f32, b: f32, a: f32);
	let glClear: fn(bits : int);
	let glBegin: fn(mode : int);
	let glEnd: fn();
	let glVertex2f: fn(x: f32, y: f32);
	let glLoadIdentity: fn();
}


// libc
extern {
	/// @todo i64 -> size_t
	let malloc: fn(size: i64) -> ?void;
	let free: fn(ptr: ?void);
	let sqrt: fn(v: f64) -> f64;
}

let Vec2 := tpl[V: struct] -> struct
{
	var x: V = 0;
	var y: V = 0;
};

let Vec2i := Vec2[i32];
let Vec2f := Vec2[f32];

let Array := tpl[T: struct] -> struct
{
	var size: int = 0;
	var data: ?T = null;
} ~ {
	free(data);
};

let push := tpl[U: struct] -> fn(vec: ^Array[U], elem: U)
{
	// Naive implementation
	var new_data : ^U = malloc(sizeof(U)*(vec->size + 1));
	var i := 0;
	loop {
		if (i >= vec->size)
		{ break; }
		new_data[i]= vec->data[i];
		i += 1;
	}
	new_data[vec->size] = elem;

	free(vec->data);
	vec->data = new_data;
	vec->size += 1;
};

let drawQuad := fn(pos: Vec2f, rad: Vec2f)
{
	var ll := Vec2f(pos.x - rad.x, pos.y - rad.y);
	var ur := Vec2f(pos.x + rad.x, pos.y + rad.y);
	glBegin(GL_QUADS);
		glVertex2f(ll.x, ll.y);
		glVertex2f(ur.x, ll.y);
		glVertex2f(ur.x, ur.y);
		glVertex2f(ll.x, ur.y);
	glEnd();
};

let SnakeBit := struct
{
	var pos := Vec2f();
	var vel := Vec2f();
};

let GameState := struct
{
	var playerPos := Vec2f(0.0, 0.0);
	var snake := Array[SnakeBit]();
};

let create := fn(game: ^GameState)
{
	let bitCount := 30;

	/// @todo For-loop
	var i := 0;
	loop {
		if (i >= bitCount)
		 { break; }
		var p := Vec2f(i/10.0, i/20.0);
		'game->snake.>push(SnakeBit(.pos= p));
		i += 1;
	}
}

let update := fn(game: ^GameState)
{
	/// @todo Type deduction
	let dt : f32 = 1.0/60.0;
	let spd= 1.0;
	if (glfwGetKey(GLFW_KEY_A))
	{ game->playerPos.x -= spd*dt; }

	if (glfwGetKey(GLFW_KEY_D))
	{ game->playerPos.x += spd*dt; }

	var mx: int;
	var my: int;
	glfwGetMousePos('mx, 'my);

	if (glfwGetMouseButton(GLFW_MOUSE_LEFT)) {
		var mp := Vec2f(mx/150.0/2.0 - 1.0, (0-1)*my/150.0/2.0 + 1.0);
		game->playerPos = mp;
		if (game->playerPos.x < 0-1)
		{ game->playerPos.x = 0-1; }
		if (game->playerPos.y > 1)
		{ game->playerPos.y = 1; }
	}

	var prev_p := game->playerPos;
	/// @todo For-loop
	var i := 0;
	loop {
		if (i >= game->snake.size)
		{ break; }

		/// @todo Fix name lookup with array access: game->snake.data[i]->pos
		/// @todo Operator [] overloading game->snake[i]
		/// @todo Unable to trace type from (ptr + i)->member;
		var bit : ^SnakeBit = 'game->snake.data[i];

		/// @todo +-*/ overloading
		var p : Vec2f = bit->pos;
		var v : Vec2f = bit->vel;
		var dif := Vec2f(p.x - prev_p.x, p.y - prev_p.y);

		/// @todo Prefix -
		var mag : f32 = sqrt(dif.x*dif.x + dif.y*dif.y)*(0-1000);
		var a := Vec2f(dif.x*mag, dif.y*mag);
		
		v.x += a.x*dt;
		v.y += (a.y - 9.0)*dt;

		var drag : f32 = (v.x*v.x + v.y*v.y)*0.02;
		if (drag > 0.5)
		{Â drag= 0.5; }

		v.x -= v.x*drag;
		v.y -= v.y*drag;

		// Damping
		v.x *= 0.99;
		v.y *= 0.99;

		p.x += v.x*dt;
		p.y += v.y*dt;

		bit->pos = p;
		bit->vel = v;
		prev_p = p;

		i += 1;
	}
};

let render := fn(game: ^GameState)
{
	glClearColor(0.5, 0.5, 0.3, 0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	glLoadIdentity();

	drawQuad(game->playerPos, Vec2f(0.05, 0.05));

	var i := 0;
	loop {
		if (i >= game->snake.size)
		{ break; }

		var bit : ^SnakeBit = 'game->snake.data[i];
		drawQuad(bit->pos, Vec2f(0.02, 0.02));

		i += 1;
	}
	glfwSwapBuffers();
};

let main := fn() -> int
{
	if (glfwInit() == 0)
		{ return 1; }

	glfwOpenWindow(600, 600, 0,0,0,0,0,0, GLFW_WINDOW);
	glfwSetWindowTitle("gamelang");

	var game := GameState();
	'game.>create();
	loop {
		'game.>update();
		'game.>render();
		glfwSleep(0.001);
	}

	glfwTerminate();
	return 0;
};
